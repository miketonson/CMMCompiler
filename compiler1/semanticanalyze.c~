/*
 * =====================================================================================
 *
 *       Filename:  semanticanalyze.c
 *
 *    Description:  
 *
 *        Version:  1.0
 *        Created:  04/19/2014 01:47:41 PM
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  YOUR NAME (), 
 *   Organization:  
 *
 * =====================================================================================
 */
#include <stdlib.h>
#include "tree.h"
#include "semanticlist.h"

void SemanticAnalyze()
{
	if(have_wrong == 1)
	{
		return;
	}
	expnode *NODE = RootNode;
//	int tab_num = 0;
	if(NODE->kind == Program)
	{
		printf("Start Semantic Analyze\n");
		NODE->search_num = 1;
		NODE = NODE->son_node[0];
//		tab_num++;
	}
	else
	{
		printf("analyze start error\n");
		return;
	}
	while(1)
	{
		if(NODE->kind == Program && NODE->node_type == 1)
		{
			break;
		}
		switch(NODE->node_type)
		{
			case 1:
			{
				if(NODE->search_num == 0)
				{
		//			PrintKind(tab_num, NODE->kind, NODE->lineno);
					
				}
				if(NODE->search_num < NODE->node_sum)
				{
					int now_num = NODE->search_num;
					NODE->search_num++;
					tab_num++;
					if(NODE->son_node[now_num]->node_sum > 0 || NODE->son_node[now_num]->node_type != 1)
					{
						NODE = NODE->son_node[now_num];
					}
					else
					{
						tab_num--;
					}
				}
				else
				{
					NODE = NODE->father_node;
					tab_num--;
				}
				break;
			}
			case 2:
			{
		//		PrintTerm(tab_num, NODE->term);
				NODE = NODE->father_node;
				tab_num--;
				break;
			}
			case 3:
			{
		//		PrintMean(tab_num, NODE);
				NODE = NODE->father_node;
				tab_num--;
				break;
			}
			default:
			{
				printf("error in the null\n");
				break;
			}
		}
	}
}
